'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _pundleApi = require('pundle-api');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = (0, _pundleApi.createTransformer)(function () {
  var _ref = _asyncToGenerator(function* (config, file) {
    if (!(0, _pundleApi.shouldProcess)(this.config.rootDirectory, file.filePath, config)) {
      return null;
    }

    var babelPath = config.babelPath;
    try {
      babelPath = yield this.resolve(babelPath);
    } catch (_) {
      throw new _pundleApi.MessageIssue('Unable to find babel-core', 'error');
    }

    var babel = require(babelPath);

    var processed = void 0;
    try {
      processed = babel.transform(file.contents, Object.assign({}, config.config, {
        filename: file.filePath,
        sourceMap: true,
        highlightCode: false,
        sourceFileName: file.filePath
      }));
    } catch (error) {
      var errorMessage = error.message + ' in ' + (0, _pundleApi.getRelativeFilePath)(file.filePath, this.config.rootDirectory);
      if (error.loc) {
        throw new _pundleApi.FileIssue(file.contents, error.loc.line, error.loc.column + 1, errorMessage, 'error');
      } else {
        throw new _pundleApi.MessageIssue(errorMessage, 'error');
      }
    }
    var contents = processed.code;
    var sourceMap = processed.map;

    return { contents: contents, sourceMap: sourceMap };
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}(), {
  babelPath: 'babel-core',

  config: {},
  extensions: [],
  exclude: [/(node_modules|bower_components)/]
});