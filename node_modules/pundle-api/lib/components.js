'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.createLoader = createLoader;
exports.createPlugin = createPlugin;
exports.createResolver = createResolver;
exports.createReporter = createReporter;
exports.createGenerator = createGenerator;
exports.createTransformer = createTransformer;
exports.createPostTransformer = createPostTransformer;
exports.createWatcher = createWatcher;

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _helpers = require('./helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var noOp = function noOp() {};

function create(config, defaultConfig, type) {
  var callback = void 0;
  var activate = noOp;
  var dispose = noOp;
  if (typeof config === 'function') {
    (0, _assert2.default)(typeof config === 'function', 'Parameter 1 must be a function');
    callback = config;
  } else if ((typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object' && config) {
    if (config.activate) {
      (0, _assert2.default)(typeof config.activate === 'function', 'config.activate must be a function');
      activate = config.activate;
    }
    if (config.dispose) {
      (0, _assert2.default)(typeof config.dispose === 'function', 'config.dispose must be a function');
      dispose = config.dispose;
    }
    (0, _assert2.default)(config.callback === 'function', 'config.callback must be a function');
    callback = config.callback;
  } else {
    throw new Error('Parameter 1 must be a function or config object');
  }
  (0, _assert2.default)((typeof defaultConfig === 'undefined' ? 'undefined' : _typeof(defaultConfig)) === 'object' && defaultConfig, 'Parameter 2 must be an object');

  return {
    $type: type,
    $apiVersion: _helpers.version,
    activate: activate,
    callback: callback,
    dispose: dispose,
    defaultConfig: defaultConfig
  };
}

function createLoader(options) {
  var defaultConfig = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  return create(options, defaultConfig, 'loader');
}

function createPlugin(options) {
  var defaultConfig = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  return create(options, defaultConfig, 'plugin');
}

function createResolver(givenOptions) {
  var defaultConfig = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var allowRecursive = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];

  var options = givenOptions;
  if (!allowRecursive) {
    if (typeof options === 'function') {
      options = (0, _helpers.makePromisedLock)(options, function (_, request, fromFile) {
        return request + '$' + fromFile;
      });
    } else if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && options) {
      options.callback = (0, _helpers.makePromisedLock)(options.callback, function (_, request, fromFile) {
        return request + '$' + fromFile;
      });
    }
  }
  return create(options, defaultConfig, 'resolver');
}

function createReporter(options) {
  var defaultConfig = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  return create(options, defaultConfig, 'reporter');
}

function createGenerator(options) {
  var defaultConfig = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  return create(options, defaultConfig, 'generator');
}

function createTransformer(options) {
  var defaultConfig = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  return create(options, defaultConfig, 'transformer');
}

function createPostTransformer(options) {
  var defaultConfig = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  return create(options, defaultConfig, 'post-transformer');
}

function createWatcher(callbacks) {
  var defaultConfig = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var anyCallbackGiven = false;
  var activate = noOp;
  var tick = noOp;
  var ready = noOp;
  var compile = noOp;
  var dispose = noOp;

  (0, _assert2.default)((typeof callbacks === 'undefined' ? 'undefined' : _typeof(callbacks)) === 'object' && callbacks, 'Parameter 1 to createWatcher() must be an object');

  if (callbacks.activate) {
    anyCallbackGiven = true;
    (0, _assert2.default)(typeof callbacks.activate === 'function', 'callbacks.activate() must be a function');
    activate = callbacks.activate;
  }
  if (callbacks.tick) {
    anyCallbackGiven = true;
    (0, _assert2.default)(typeof callbacks.tick === 'function', 'callbacks.tick() must be a function');
    tick = callbacks.tick;
  }
  if (callbacks.ready) {
    anyCallbackGiven = true;
    (0, _assert2.default)(typeof callbacks.ready === 'function', 'callbacks.ready() must be a function');
    ready = callbacks.ready;
  }
  if (callbacks.compile) {
    anyCallbackGiven = true;
    (0, _assert2.default)(typeof callbacks.compile === 'function', 'callbacks.compile() must be a function');
    compile = callbacks.compile;
  }
  if (callbacks.dispose) {
    anyCallbackGiven = true;
    (0, _assert2.default)(typeof callbacks.dispose === 'function', 'callbacks.dispose() must be a function');
    dispose = callbacks.dispose;
  }

  if (!anyCallbackGiven) {
    throw new Error('createWatcher() expects at least one valid callback');
  }

  return {
    $type: 'watcher',
    $apiVersion: _helpers.version,
    activate: activate,
    tick: tick,
    ready: ready,
    compile: compile,
    dispose: dispose,
    defaultConfig: defaultConfig
  };
}