'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MESSAGES = exports.MESSAGES = {
  ENOENT: 'File or directory not found',
  NOT_MOTION_APP: 'Unable to run, directory is not a motion app',
  INVALID_MANIFEST: "There are syntax errors in your '.motion.js' file",
  ALREADY_MOTION_APP: 'Directory is already a motion app'
};

// Note: This is generating automatically from MESSAGES
var ERROR_CODE = exports.ERROR_CODE = {};
var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = Object.keys(MESSAGES)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    var name = _step.value;

    ERROR_CODE[name] = name;
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator.return) {
      _iterator.return();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

var MotionError = exports.MotionError = function (_Error) {
  _inherits(MotionError, _Error);

  function MotionError(code) {
    _classCallCheck(this, MotionError);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(MotionError).call(this, MESSAGES[code]));

    _this.code = code;
    _this.motion = true;
    return _this;
  }

  return MotionError;
}(Error);
//# sourceMappingURL=error.js.map