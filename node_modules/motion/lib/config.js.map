{"version":3,"sources":["../src/config.js"],"names":[],"mappings":";;;;;;;;AAEA;;;;AACA;;IAAY,E;;AACZ;;IAAY,O;;AACZ;;;;;;;;;;IAGqB,M;AAKnB,kBAAY,MAAZ,EAAkC,UAAlC,EAAsD,WAAtD,EAA2E;AAAA;;AACzE,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,UAAL,GAAkB,UAAlB;AACA,SAAK,WAAL,GAAmB,WAAnB;AACD;;;;yCACoB;AACnB,aAAO,eAAK,OAAL,CAAa,KAAK,WAAlB,EAA+B,KAAK,GAAL,CAAS,iBAAT,CAA/B,CAAP;AACD;;;yCACoB;AACnB,aAAO,eAAK,OAAL,CAAa,KAAK,WAAlB,EAA+B,KAAK,GAAL,CAAS,iBAAT,CAA/B,CAAP;AACD;;;wBACG,G,EAA+B;AACjC,aAAO,KAAK,MAAL,CAAY,GAAZ,CAAP;AACD;;;;gDAC4B;AAC3B,cAAM,GAAG,SAAH,CAAa,KAAK,UAAlB,EAA8B,KAAK,MAAnC,CAAN;AACD,O;;;;;;;;;;;+CACmB,W,EAAsC;AACxD,YAAM,SAAS;AACb,iBAAO;AACL,qBAAS,CAAC,qBAAD;AADJ,WADM;AAIb,oBAAU,UAJG;AAKb,yBAAe,QAAQ,eAAR,CAAwB,IAAxB,EAA8B,KAA9B,CALF;AAMb,0BAAgB,IANH;AAOb,2BAAiB,GAPJ;AAQb,2BAAiB;AARJ,SAAf;AAUA,YAAM,aAAa,eAAK,IAAL,CAAU,WAAV,EAAuB,cAAvB,CAAnB;AACA,YAAI;AACF,iBAAO,MAAP,CAAc,MAAd,GAAsB,MAAM,GAAG,QAAH,CAAY,UAAZ,CAA5B;AACD,SAFD,CAEE,OAAO,KAAP,EAAc;AACd,cAAI,SAAS,MAAM,IAAN,KAAe,aAA5B,EAA2C;AACzC,kBAAM,uBAAgB,kBAAW,gBAA3B,CAAN;AACD;AACF;AACD,eAAO,IAAI,MAAJ,CAAW,MAAX,EAAmB,UAAnB,EAA+B,WAA/B,CAAP;AACD,O;;;;;;;;;;;;;kBA1CkB,M","file":"config.js","sourcesContent":["/* @flow */\n\nimport Path from 'path'\nimport * as FS from './fs'\nimport * as Helpers from './helpers'\nimport { MotionError, ERROR_CODE } from './error'\nimport type { Config as ConfigStruct } from './types'\n\nexport default class Config {\n  config: ConfigStruct;\n  configPath: string;\n  projectPath: string;\n\n  constructor(config: ConfigStruct, configPath: string, projectPath: string) {\n    this.config = config\n    this.configPath = configPath\n    this.projectPath = projectPath\n  }\n  getBundleDirectory() {\n    return Path.resolve(this.projectPath, this.get('bundleDirectory'))\n  }\n  getPublicDirectory() {\n    return Path.resolve(this.projectPath, this.get('publicDirectory'))\n  }\n  get(key: $Keys<ConfigStruct>): any {\n    return this.config[key]\n  }\n  async write(): Promise<void> {\n    await FS.writeJSON(this.configPath, this.config)\n  }\n  static async create(projectPath: string): Promise<Config> {\n    const config = {\n      babel: {\n        presets: ['babel-preset-motion']\n      },\n      pathType: 'filePath',\n      webServerPort: Helpers.getRandomNumber(8000, 15000),\n      saveNpmModules: true,\n      bundleDirectory: '.',\n      publicDirectory: './public',\n    }\n    const configPath = Path.join(projectPath, '.motion.json')\n    try {\n      Object.assign(config, await FS.readJSON(configPath))\n    } catch (error) {\n      if (error && error.name === 'SyntaxError') {\n        throw new MotionError(ERROR_CODE.INVALID_MANIFEST)\n      }\n    }\n    return new Config(config, configPath, projectPath)\n  }\n}\n"]}