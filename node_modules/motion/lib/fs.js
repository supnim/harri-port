'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.writeJSON = exports.readJSON = exports.mkdir = exports.realpath = exports.writeFile = exports.readFile = exports.unlink = undefined;

var readJSON = exports.readJSON = function () {
  var _ref = _asyncToGenerator(function* (filePath) {
    var encoding = arguments.length <= 1 || arguments[1] === undefined ? 'utf8' : arguments[1];

    var contents = yield readFile(filePath);
    return JSON.parse(contents.toString(encoding));
  });

  return function readJSON(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var writeJSON = exports.writeJSON = function () {
  var _ref2 = _asyncToGenerator(function* (filePath, contents) {
    var pretty = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];

    var serialized = pretty ? JSON.stringify(contents, null, 2) : JSON.stringify(contents);
    yield writeFile(filePath, serialized + '\n');
  });

  return function writeJSON(_x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();

exports.copy = copy;
exports.exists = exists;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _sbCopy = require('sb-copy');

var _sbCopy2 = _interopRequireDefault(_sbCopy);

var _sbPromisify = require('sb-promisify');

var _sbPromisify2 = _interopRequireDefault(_sbPromisify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

var unlink = exports.unlink = (0, _sbPromisify2.default)(_fs2.default.unlink);
var readFile = exports.readFile = (0, _sbPromisify2.default)(_fs2.default.readFile);
var writeFile = exports.writeFile = (0, _sbPromisify2.default)(_fs2.default.writeFile);
var realpath = exports.realpath = (0, _sbPromisify2.default)(_fs2.default.realpath);
var mkdir = exports.mkdir = (0, _sbPromisify2.default)(_mkdirp2.default);

function copy(source, target) {
  return (0, _sbCopy2.default)(source, target, {
    overwrite: false,
    deleteExtra: false,
    failIfExists: false
  });
}
function exists(filePath) {
  return new Promise(function (resolve) {
    _fs2.default.access(filePath, _fs2.default.R_OK, function (error) {
      resolve(error === null);
    });
  });
}
//# sourceMappingURL=fs.js.map