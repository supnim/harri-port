{"version":3,"sources":["../src/fs.js"],"names":[],"mappings":";;;;;;;;+BA2BO,WAAwB,QAAxB,EAAsF;AAAA,QAA5C,QAA4C,yDAAzB,MAAyB;;AAC3F,QAAM,WAAW,MAAM,SAAS,QAAT,CAAvB;AACA,WAAO,KAAK,KAAL,CAAW,SAAS,QAAT,CAAkB,QAAlB,CAAX,CAAP;AACD,G;;kBAHqB,Q;;;;;;gCAIf,WAAyB,QAAzB,EAA2C,QAA3C,EAAoG;AAAA,QAAvC,MAAuC,yDAArB,IAAqB;;AACzG,QAAM,aAAa,SAAS,KAAK,SAAL,CAAe,QAAf,EAAyB,IAAzB,EAA+B,CAA/B,CAAT,GAA6C,KAAK,SAAL,CAAe,QAAf,CAAhE;AACA,UAAM,UAAU,QAAV,EAAuB,UAAvB,QAAN;AACD,G;;kBAHqB,S;;;;;QAlBN,I,GAAA,I;QAOA,M,GAAA,M;;AAlBhB;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEO,IAAM,0BAAS,2BAAU,aAAG,MAAb,CAAf;AACA,IAAM,8BAAW,2BAAU,aAAG,QAAb,CAAjB;AACA,IAAM,gCAAY,2BAAU,aAAG,SAAb,CAAlB;AACA,IAAM,8BAAW,2BAAU,aAAG,QAAb,CAAjB;AACA,IAAM,wBAAQ,4CAAd;;AAEA,SAAS,IAAT,CAAc,MAAd,EAA8B,MAA9B,EAA6D;AAClE,SAAO,sBAAU,MAAV,EAAkB,MAAlB,EAA0B;AAC/B,eAAW,KADoB;AAE/B,iBAAa,KAFkB;AAG/B,kBAAc;AAHiB,GAA1B,CAAP;AAKD;AACM,SAAS,MAAT,CAAgB,QAAhB,EAAoD;AACzD,SAAO,IAAI,OAAJ,CAAY,UAAS,OAAT,EAAkB;AACnC,iBAAG,MAAH,CAAU,QAAV,EAAoB,aAAG,IAAvB,EAA6B,UAAS,KAAT,EAAgB;AAC3C,cAAQ,UAAU,IAAlB;AACD,KAFD;AAGD,GAJM,CAAP;AAKD","file":"fs.js","sourcesContent":["/* @flow */\n\nimport FS from 'fs'\nimport mkdirp from 'mkdirp'\nimport copyFiles from 'sb-copy'\nimport promisify from 'sb-promisify'\n\nexport const unlink = promisify(FS.unlink)\nexport const readFile = promisify(FS.readFile)\nexport const writeFile = promisify(FS.writeFile)\nexport const realpath = promisify(FS.realpath)\nexport const mkdir = promisify(mkdirp)\n\nexport function copy(source: string, target: string): Promise<void> {\n  return copyFiles(source, target, {\n    overwrite: false,\n    deleteExtra: false,\n    failIfExists: false\n  })\n}\nexport function exists(filePath: string): Promise<boolean> {\n  return new Promise(function(resolve) {\n    FS.access(filePath, FS.R_OK, function(error) {\n      resolve(error === null)\n    })\n  })\n}\nexport async function readJSON(filePath: string, encoding: string = 'utf8'): Promise<Object> {\n  const contents = await readFile(filePath)\n  return JSON.parse(contents.toString(encoding))\n}\nexport async function writeJSON(filePath: string, contents: Object, pretty: boolean = true): Promise<void> {\n  const serialized = pretty ? JSON.stringify(contents, null, 2) : JSON.stringify(contents)\n  await writeFile(filePath, `${serialized}\\n`)\n}\n"]}