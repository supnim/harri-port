'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPundleInstance = exports.TICK = exports.X = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var getPundleInstance = exports.getPundleInstance = function () {
  var _ref = _asyncToGenerator(function* (cli, terminal, projectPath, development, givenConfig, errorCallback) {
    var config = normalizeConfig(projectPath, givenConfig);
    var pundleEntry = ['./'];

    var subscription = new _sbEventKit.CompositeDisposable();
    var pundle = yield _pundle2.default.create({
      entry: pundleEntry,
      presets: [[require.resolve('pundle-preset-default'), {
        generator: {
          pathType: config.pathType === 'number' ? 'number' : 'filePath'
        },
        reporter: {
          log: function log(o) {
            return cli.log(o);
          }
        }
      }]],
      components: [require.resolve('pundle-plugin-dedupe'), [require.resolve('pundle-plugin-npm-installer'), {
        save: config.saveNpmModules,
        beforeInstall: function beforeInstall(name) {
          if (terminal) {
            var message = 'Installing ' + name;
            cli.addSpinner(message);
          }
        },
        afterInstall: function afterInstall(name, error) {
          if (terminal) {
            var message = 'Installing ' + name;
            cli.removeSpinner(message);
            // ^ To insert a new line to allow default logger of Pundle to output
          } else if (error) {
            errorCallback(error);
          }
        },

        include: ['*.js']
      }], [require.resolve('pundle-transformer-babel'), {
        babelPath: require.resolve('babel-core'),
        config: config.babel,
        extensions: ['js']
      }], (0, _pundleApi.createPlugin)(function (_, file) {
        if (development && file.filePath.indexOf(projectPath) === 0 && file.filePath.indexOf('node_modules') === -1) {
          cli.log(_chalk2.default.dim(_path2.default.join('$root', _path2.default.relative(projectPath, file.filePath))) + ' ' + _chalk2.default.green(TICK));
        }
      })],
      rootDirectory: projectPath,
      replaceVariables: {
        'process.env.NODE_ENV': JSON.stringify(development ? 'development' : 'production')
      }
    });
    subscription.add(pundle);

    if (!development) {
      return { pundle: pundle, subscription: subscription };
    }
    var server = yield (0, _pundleDev.createServer)(pundle, {
      port: config.webServerPort,
      rootDirectory: config.publicDirectory,
      hmrPath: '/_/bundle_hmr',
      bundlePath: '/_/bundle.js',
      publicPath: '/',
      sourceMapPath: '/_/bundle.js.map',
      redirectNotFoundToIndex: true
    });
    subscription.add(server);

    return { pundle: pundle, subscription: subscription };
  });

  return function getPundleInstance(_x, _x2, _x3, _x4, _x5, _x6) {
    return _ref.apply(this, arguments);
  };
}();

exports.getRandomNumber = getRandomNumber;
exports.normalizeConfig = normalizeConfig;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _pundle = require('pundle');

var _pundle2 = _interopRequireDefault(_pundle);

var _pundleApi = require('pundle-api');

var _pundleDev = require('pundle-dev');

var _sbEventKit = require('sb-event-kit');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

var X = exports.X = '✗';
var TICK = exports.TICK = '✓';

// From: goo.gl/fZA6BF
function getRandomNumber(min, max) {
  return Math.floor(Math.random() * (max - min)) + min;
}

// NOTE: The reason we are not replacing these in config is because when we then save the config
// We'd end up with absolute paths in it, using this function in every config user function
// will let us avoid that.
function normalizeConfig(projectPath, givenConfig) {
  var config = Object.assign({}, givenConfig, {
    babel: Object.assign({}, givenConfig.babel)
  });
  if (config.bundleDirectory.substr(0, 1) === '.') {
    config.bundleDirectory = _path2.default.resolve(projectPath, config.bundleDirectory);
  }
  if (config.publicDirectory.substr(0, 1) === '.') {
    config.publicDirectory = _path2.default.resolve(projectPath, config.publicDirectory);
  }
  if (!config.babel || _typeof(config.babel) !== 'object') {
    config.babel = { plugins: [], presets: [] };
  }
  if (!Array.isArray(config.babel.plugins)) {
    config.babel.plugins = [];
  } else {
    config.babel.plugins = config.babel.plugins.slice();
  }
  if (!Array.isArray(config.babel.presets)) {
    config.babel.presets = [];
  } else {
    config.babel.presets = config.babel.presets.slice();
  }
  if (config.babel.presets.indexOf('babel-preset-motion') !== -1) {
    config.babel.presets.splice(config.babel.presets.indexOf('babel-preset-motion'), 1, require.resolve('babel-preset-es2015-sane'), require.resolve('babel-preset-motion'));
  }
  config.babel.plugins = config.babel.plugins.map(function (givenEntry) {
    if (!givenEntry) {
      return givenEntry;
    }
    var entry = Array.isArray(givenEntry) ? givenEntry : [givenEntry, {}];
    if (!_path2.default.isAbsolute(entry[0])) {
      if (entry[0].substr(0, 1) === '.') {
        entry[0] = _path2.default.resolve(projectPath, entry[0]);
      } else {
        entry[0] = _path2.default.join(projectPath, 'node_modules', entry[0]);
      }
    }
    return entry;
  });
  return config;
}
//# sourceMappingURL=helpers.js.map