'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _util = require('util');

var _vorpal = require('vorpal');

var _vorpal2 = _interopRequireDefault(_vorpal);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CLI_DELIMITER = _chalk2.default.yellow('♥ motion ♥') + ' ' + _chalk2.default.red('❯') + _chalk2.default.yellow('❯') + _chalk2.default.green('❯');
var WELCOME_MESSAGE = _chalk2.default.red('♥ ♥ ♥ ♥ ♥') + '\t' + _chalk2.default.yellow('Welcome to Motion') + '\t' + _chalk2.default.red('♥ ♥ ♥ ♥ ♥');
var BYE_MESSAGE = _chalk2.default.red('♥ ♥ ♥ ♥ ♥') + '\t' + _chalk2.default.yellow('Bye from Motion') + '\t\t' + _chalk2.default.red('♥ ♥ ♥ ♥ ♥');

var CLI = function () {
  function CLI() {
    _classCallCheck(this, CLI);

    this.active = false;
    this.instance = (0, _vorpal2.default)();
  }

  _createClass(CLI, [{
    key: 'activate',
    value: function activate() {
      if (process.versions.electron) {
        // Vorpal crashes electron
        return;
      }
      if (this.active) {
        this.instance.show();
        return;
      }

      this.active = true;
      this.instance.delimiter(CLI_DELIMITER);
      this.instance.show();
      this.instance.log(WELCOME_MESSAGE);
    }
  }, {
    key: 'deactivate',
    value: function deactivate() {
      this.instance.hide();
    }
  }, {
    key: 'addCommand',
    value: function addCommand(name, helpText, callback) {
      var _this = this;

      this.instance.command(name, helpText).action(function (args, keepRunning) {
        var result = callback.call(_this, args);
        if (result && result.constructor.name === 'Promise') {
          result.then(keepRunning, keepRunning);
        } else keepRunning();
      });
    }
  }, {
    key: 'replaceCommand',
    value: function replaceCommand(name, helpText, callback) {
      var command = this.instance.find(name);
      if (command) {
        command.remove();
      }
      this.addCommand(name, helpText, callback);
    }
  }, {
    key: 'log',
    value: function log() {
      var contents = [];
      for (var i = 0; i < arguments.length; ++i) {
        var value = arguments[i];
        if (typeof value === 'string') {
          contents.push(value);
        } else if (value && value.constructor.name.endsWith('Error')) {
          contents.push('[' + value.constructor.name + ': ' + value.message + ' ' + value.stack.split('\n')[1].trim() + ']');
        } else {
          contents.push((0, _util.inspect)(value));
        }
      }
      if (this.active) {
        this.instance.log(contents.join(' '));
      } else {
        console.log(contents.join(' '));
      }
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      if (this.active) {
        this.instance.log(BYE_MESSAGE);
        this.instance.hide();
        this.active = false;
      }
    }
  }]);

  return CLI;
}();

exports.default = CLI;
//# sourceMappingURL=cli.js.map