#!/usr/bin/env node
'use strict';

var _templateObject = _taggedTemplateLiteral(['\n          ', '\n          ', '\n            $ cd ', '\n            $ motion\n        '], ['\n          ', '\n          ', '\n            $ cd ', '\n            $ motion\n        ']),
    _templateObject2 = _taggedTemplateLiteral(['\n          ', '\n          To access the built files, do\n            $ cd ', '\n        '], ['\n          ', '\n          To access the built files, do\n            $ cd ', '\n        ']),
    _templateObject3 = _taggedTemplateLiteral(['\n          ', '\n          ', '\n            $ motion\n        '], ['\n          ', '\n          ', '\n            $ motion\n        ']);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _sbCommand = require('sb-command');

var _sbCommand2 = _interopRequireDefault(_sbCommand);

var _coolTrim = require('cool-trim');

var _coolTrim2 = _interopRequireDefault(_coolTrim);

var _package = require('../../package.json');

var _package2 = _interopRequireDefault(_package);

var _helpers = require('./helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

require('process-bootstrap')('motion');

var currentDirectory = process.cwd();

_sbCommand2.default.version('Motion v' + _package2.default.version).command('new <name>', 'Create a new motion app with the given name', function (options, name) {
  (0, _helpers.getMotion)(_path2.default.join(currentDirectory, name), function (motion) {
    return motion.init().then(function () {
      console.log((0, _coolTrim2.default)(_templateObject, _chalk2.default.green('App created successfully! Enjoy'), _chalk2.default.yellow('To run motion in your new app, do'), name));
    });
  });
}).command('build', 'Build dist files of the current motion app', function () {
  (0, _helpers.getMotion)(currentDirectory, function (motion) {
    // $FlowIgnore: Flow doesn't recognize this prop
    return motion.build(process.stdout.isTTY).then(function () {
      console.log((0, _coolTrim2.default)(_templateObject2, _chalk2.default.green('App built successfully'), _path2.default.relative(currentDirectory, motion.config.getPublicDirectory())));
    });
  });
}).command('watch', 'Make the Motion CLI run Dev server and watch the files for changes', function () {
  (0, _helpers.getMotion)(currentDirectory, function (motion) {
    // $FlowIgnore: Flow doesn't recognize this prop
    return motion.watch(process.stdout.isTTY);
  });
}).command('init', 'Copy motion configuation files into the current directory', function () {
  (0, _helpers.getMotion)(currentDirectory, function (motion) {
    return motion.init().then(function () {
      console.log((0, _coolTrim2.default)(_templateObject3, _chalk2.default.green('Motion initialized successfully! Enjoy'), _chalk2.default.yellow('To run motion in your new app, do')));
    });
  });
}).default(function (_) {
  if ((arguments.length <= 1 ? 0 : arguments.length - 1) !== 0) {
    _sbCommand2.default.showHelp();
    process.exit(1);
  }
  (0, _helpers.getMotion)(currentDirectory, function (motion) {
    // $FlowIgnore: Flow doesn't recognize this prop
    return motion.watch(process.stdout.isTTY);
  });
}).parse(process.argv);
//# sourceMappingURL=index.js.map