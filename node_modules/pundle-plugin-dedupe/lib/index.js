'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _pundleApi = require('pundle-api');

var _helpers = require('./helpers');

var Helpers = _interopRequireWildcard(_helpers);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var memoryCache = new Map();

exports.default = (0, _pundleApi.createResolver)(function () {
  var _ref = _asyncToGenerator(function* (config, givenRequest, fromFile) {
    var cached = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];

    if (givenRequest.slice(0, 1) === '.' || _path2.default.isAbsolute(givenRequest)) {
      return null;
    }
    var result = yield this.resolve(givenRequest, fromFile, cached, true);
    if (!result || !result.targetManifest || !result.targetManifest.version) {
      return null;
    }
    var moduleName = Helpers.getModuleName(givenRequest);
    var versions = Helpers.getModuleVersions(memoryCache, moduleName);
    var requestedVersion = Helpers.getRequiredVersion(result.sourceManifest, moduleName);

    var cacheVersion = requestedVersion || result.targetManifest.version;
    var matched = null;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = versions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var entry = _step.value;

        if (_semver2.default.satisfies(entry.version, cacheVersion)) {
          matched = entry;
          break;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (!matched) {
      versions.add(result.targetManifest);
      matched = result.targetManifest;
    }
    var newResult = {
      resolved: _path2.default.join(matched.rootDirectory, _path2.default.relative(result.targetManifest.rootDirectory, result.resolved)),
      sourceManifest: result.sourceManifest,
      targetManifest: matched
    };
    return newResult;
  });

  return function (_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}(), {}, false);