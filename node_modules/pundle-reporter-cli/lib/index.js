'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _babelCodeFrame = require('babel-code-frame');

var _babelCodeFrame2 = _interopRequireDefault(_babelCodeFrame);

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _pundleApi = require('pundle-api');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var SEVERITIES = {
  info: {
    color: 'black',
    background: 'bgBlue',
    title: '  Info   '
  },
  error: {
    color: 'white',
    background: 'bgRed',
    title: '  Error  '
  },
  warning: {
    color: 'white',
    background: 'bgYellow',
    title: ' Warning '
  }
};

exports.default = (0, _pundleApi.createReporter)(function () {
  var _ref = _asyncToGenerator(function* (config, error) {
    (0, _assert2.default)((typeof error === 'undefined' ? 'undefined' : _typeof(error)) === 'object' && error, 'Error must be an object');

    var severity = SEVERITIES[typeof error.severity === 'string' ? error.severity : 'error'];
    var errorMessage = error.message;
    var generatedType = _chalk2.default.bold[severity.background][severity.color](severity.title);
    var stack = '';
    if (error.constructor.name === 'FileIssue') {
      stack = (0, _babelCodeFrame2.default)(error.contents, error.line, error.column, {
        highlightCode: _chalk2.default.supportsColor,
        linesAbove: 4,
        linesBelow: 3
      });
    } else if (process.env.PUNDLE_DEBUG_REPORTS) {
      stack = error.stack;
    }

    var generatedText = generatedType + ' ' + errorMessage + (stack ? '\n' + stack : '');
    if (!_chalk2.default.supportsColor) {
      generatedText = _chalk2.default.stripColor(generatedText);
    }
    config.log(generatedText, error);
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}(), {
  log: function log(o) {
    return console.log(o);
  }
});