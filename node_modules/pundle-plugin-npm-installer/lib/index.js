'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _pundleApi = require('pundle-api');

var _helpers = require('./helpers');

var _installer = require('./installer');

var _installer2 = _interopRequireDefault(_installer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = (0, _pundleApi.createResolver)(function () {
  var _ref = _asyncToGenerator(function* (config, givenRequest, fromFile) {
    if (givenRequest.slice(0, 1) === '.' || _path2.default.isAbsolute(givenRequest)) {
      return null;
    }

    try {
      return yield this.resolve(givenRequest, fromFile);
    } catch (_) {}
    if (!(0, _pundleApi.shouldProcess)(this.config.rootDirectory, fromFile, config)) {
      return null;
    }

    var moduleName = (0, _helpers.getModuleName)(givenRequest);
    try {
      yield this.resolve(moduleName + '/package.json', fromFile);
      return null;
    } catch (_) {}
    this.report(new _pundleApi.MessageIssue('Installing \'' + moduleName + '\' in ' + this.config.rootDirectory, 'info'));
    config.beforeInstall(moduleName);
    var error = null;
    try {
      yield _installer2.default.install(moduleName, config.save, this.config.rootDirectory);
    } catch (_) {
      error = _;
    }
    config.afterInstall(moduleName, error);
    if (error) {
      this.report(new _pundleApi.MessageIssue('Failed to install \'' + moduleName + '\'', 'error'));
    } else {
      this.report(new _pundleApi.MessageIssue('Installed \'' + moduleName + '\' successfully', 'info'));
    }
    return yield this.resolve(givenRequest, fromFile, false);
  });

  return function (_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}(), {
  save: false,
  beforeInstall: function beforeInstall() {},
  afterInstall: function afterInstall() {},

  include: ['*'],
  exclude: [/(node_modules|bower_components)/]
}, false);