'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _sbEventKit = require('sb-event-kit');

var _helpers = require('./helpers');

var Helpers = _interopRequireWildcard(_helpers);

var _compilation = require('./compilation');

var _compilation2 = _interopRequireDefault(_compilation);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UNIQUE_SIGNATURE_OBJ = {};

var Pundle = function () {
  function Pundle(signature, config) {
    _classCallCheck(this, Pundle);

    if (signature !== UNIQUE_SIGNATURE_OBJ) {
      throw new Error('Direct constructor call not allowed. Use Pundle.create() instead');
    }

    this.config = config;
    this.emitter = new _sbEventKit.Emitter();
    this.compilation = new _compilation2.default(config.compilation);
    this.subscriptions = new _sbEventKit.CompositeDisposable();

    this.subscriptions.add(this.emitter);
    this.subscriptions.add(this.compilation);
  }

  _createClass(Pundle, [{
    key: 'loadComponents',
    value: function () {
      var _ref = _asyncToGenerator(function* (givenComponents) {
        var _this = this;

        if (!Array.isArray(givenComponents)) {
          throw new Error('Parameter 1 to loadComponents() must be an Array');
        }
        var components = yield Helpers.getLoadables(givenComponents, this.config.compilation.rootDirectory);
        var subscriptions = new _sbEventKit.CompositeDisposable();
        subscriptions.add.apply(subscriptions, _toConsumableArray(components.map(function (_ref2) {
          var _ref3 = _slicedToArray(_ref2, 2);

          var component = _ref3[0];
          var config = _ref3[1];
          return _this.compilation.addComponent(component, config);
        })));
        return subscriptions;
      });

      function loadComponents(_x) {
        return _ref.apply(this, arguments);
      }

      return loadComponents;
    }()
  }, {
    key: 'loadPreset',
    value: function () {
      var _ref4 = _asyncToGenerator(function* (givenPreset) {
        var _this2 = this;

        var presetConfig = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        var preset = givenPreset;
        if (typeof preset === 'string') {
          preset = yield Helpers.resolve(preset, this.config.compilation.rootDirectory);
        }
        if (!Array.isArray(preset)) {
          throw new Error('Invalid preset value/export. It must be an Array');
        }
        if ((typeof presetConfig === 'undefined' ? 'undefined' : _typeof(presetConfig)) !== 'object' || !presetConfig) {
          throw new Error('Parameter 2 to loadPreset() must be an Object');
        }

        var loadables = preset.map(function (entry) {
          if (presetConfig[entry.name] === false) {
            return false;
          }

          return [entry.component, Object.assign({}, entry.config, presetConfig[entry.name])];
        }).filter(function (i) {
          return i;
        });
        var components = yield Helpers.getLoadables(loadables, this.config.compilation.rootDirectory);
        var subscriptions = new _sbEventKit.CompositeDisposable();
        subscriptions.add.apply(subscriptions, _toConsumableArray(components.map(function (_ref5) {
          var _ref6 = _slicedToArray(_ref5, 2);

          var component = _ref6[0];
          var config = _ref6[1];
          return _this2.compilation.addComponent(component, config);
        })));
        return subscriptions;
      });

      function loadPreset(_x2, _x3) {
        return _ref4.apply(this, arguments);
      }

      return loadPreset;
    }()
  }, {
    key: 'generate',
    value: function () {
      var _ref7 = _asyncToGenerator(function* () {
        var givenFiles = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];
        var runtimeConfig = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        var files = givenFiles || (yield this.processTree());
        return yield this.compilation.generate(files, runtimeConfig);
      });

      function generate(_x5, _x6) {
        return _ref7.apply(this, arguments);
      }

      return generate;
    }()
  }, {
    key: 'processTree',
    value: function () {
      var _ref8 = _asyncToGenerator(function* () {
        var givenRequest = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];

        var _this3 = this;

        var givenFrom = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
        var cached = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];

        var requests = void 0;
        var files = new Map();
        if (!givenRequest) {
          requests = this.config.compilation.entry;
        } else if (typeof givenRequest === 'string') {
          requests = [givenRequest];
        } else if (!Array.isArray(givenRequest)) {
          throw new Error('Parameter 1 to processTree() must be null, String or an Array');
        } else {
          requests = givenRequest;
        }

        yield Promise.all(requests.map(function (request) {
          return _this3.compilation.processTree(request, givenFrom, cached, files);
        }));

        return Array.from(files.values());
      });

      function processTree(_x9, _x10, _x11) {
        return _ref8.apply(this, arguments);
      }

      return processTree;
    }()
  }, {
    key: 'watch',
    value: function watch() {
      var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

      return this.compilation.watch(Object.assign({}, this.config.watcher, config));
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      this.subscriptions.dispose();
    }
  }], [{
    key: 'create',
    value: function () {
      var _ref9 = _asyncToGenerator(function* (givenConfig) {
        (0, _assert2.default)((typeof givenConfig === 'undefined' ? 'undefined' : _typeof(givenConfig)) === 'object' && givenConfig, 'Config must be an object');
        (0, _assert2.default)(typeof givenConfig.rootDirectory === 'string', 'config.rootDirectory must be a string');

        var config = yield Helpers.getPundleConfig(givenConfig.rootDirectory, givenConfig);
        var pundle = new Pundle(UNIQUE_SIGNATURE_OBJ, config);
        yield pundle.loadComponents(config.components);
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = config.presets[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var preset = _step.value;

            if (Array.isArray(preset)) {
              yield pundle.loadPreset(preset[0], preset[1]);
            } else {
              yield pundle.loadPreset(preset);
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return pundle;
      });

      function create(_x16) {
        return _ref9.apply(this, arguments);
      }

      return create;
    }()
  }]);

  return Pundle;
}();

module.exports = Pundle;