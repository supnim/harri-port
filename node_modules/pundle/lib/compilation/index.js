'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _sbDebounce = require('sb-debounce');

var _sbDebounce2 = _interopRequireDefault(_sbDebounce);

var _lodash = require('lodash.difference');

var _lodash2 = _interopRequireDefault(_lodash);

var _pundleReporterCli = require('pundle-reporter-cli');

var _pundleReporterCli2 = _interopRequireDefault(_pundleReporterCli);

var _pundleApi = require('pundle-api');

var _sbEventKit = require('sb-event-kit');

var _watcher = require('./watcher');

var _watcher2 = _interopRequireDefault(_watcher);

var _helpers = require('./helpers');

var Helpers = _interopRequireWildcard(_helpers);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var uniqueID = 0;

var Compilation = function () {
  function Compilation(config) {
    _classCallCheck(this, Compilation);

    this.config = config;
    this.components = new Set();
    this.subscriptions = new _sbEventKit.CompositeDisposable();
  }

  _createClass(Compilation, [{
    key: 'report',
    value: function () {
      var _ref = _asyncToGenerator(function* (_report) {
        var tried = false;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = Helpers.filterComponents(this.components, 'reporter')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var entry = _step.value;

            yield Helpers.invokeComponent(this, entry, 'callback', [], _report);
            tried = true;
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        if (!tried) {
          _pundleReporterCli2.default.callback(_pundleReporterCli2.default.defaultConfig, _report);
        }
      });

      function report(_x) {
        return _ref.apply(this, arguments);
      }

      return report;
    }()
  }, {
    key: 'resolve',
    value: function () {
      var _ref2 = _asyncToGenerator(function* (request) {
        var from = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
        var cached = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
        var extraInfo = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];

        var tried = false;
        var knownExtensions = Helpers.getAllKnownExtensions(this.components);
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = Helpers.filterComponents(this.components, 'resolver')[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var entry = _step2.value;

            var result = yield Helpers.invokeComponent(this, entry, 'callback', [{ knownExtensions: knownExtensions }], request, from, cached);
            if (result && result.resolved) {
              if (extraInfo) {
                return result;
              }
              return result.resolved;
            }
            tried = true;
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        if (!tried) {
          throw new _pundleApi.MessageIssue('No module resolver configured in Pundle. Try adding pundle-resolver-default to your configuration', 'error');
        }

        var error = new Error('Cannot find module \'' + request + '\'' + (from ? ' from \'' + (0, _pundleApi.getRelativeFilePath)(from, this.config.rootDirectory) + '\'' : ''));
        error.code = 'MODULE_NOT_FOUND';
        throw error;
      });

      function resolve(_x2, _x3, _x4, _x5) {
        return _ref2.apply(this, arguments);
      }

      return resolve;
    }()
  }, {
    key: 'generate',
    value: function () {
      var _ref3 = _asyncToGenerator(function* (files) {
        var generateConfig = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        var result = void 0;
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = Helpers.filterComponents(this.components, 'generator')[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var entry = _step3.value;

            result = yield Helpers.invokeComponent(this, entry, 'callback', [generateConfig], files);
            if (result) {
              break;
            }
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        if (!result) {
          throw new _pundleApi.MessageIssue('No generator returned generated contents. Try adding pundle-generator-default to your configuration', 'error');
        }
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = Helpers.filterComponents(this.components, 'post-transformer')[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var _entry = _step4.value;

            var postTransformerResults = yield Helpers.invokeComponent(this, _entry, 'callback', [], result.contents);
            Helpers.mergeResult(result, postTransformerResults);
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return) {
              _iterator4.return();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }

        return result;
      });

      function generate(_x9, _x10) {
        return _ref3.apply(this, arguments);
      }

      return generate;
    }()
  }, {
    key: 'processTree',
    value: function () {
      var _ref4 = _asyncToGenerator(function* (request) {
        var from = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];

        var _this = this;

        var cached = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
        var files = arguments[3];

        var processFileTree = function () {
          var _ref5 = _asyncToGenerator(function* (entry) {
            var resolved = yield _this.resolve(entry.request, entry.from, cached);
            if (files.has(resolved)) {
              entry.resolved = resolved;
              return;
            }
            var file = void 0;

            files.set(resolved, null);
            try {
              file = yield _this.processFile(resolved);
            } catch (error) {
              files.delete(resolved);
              throw error;
            }
            files.set(resolved, file);
            yield Promise.all(file.imports.map(function (item) {
              return processFileTree(item, resolved);
            }));
            entry.resolved = resolved;
          });

          return function processFileTree(_x18) {
            return _ref5.apply(this, arguments);
          };
        }();
        yield processFileTree({ id: 0, request: request, resolved: null, from: from });
        return files;
      });

      function processTree(_x12, _x13, _x14, _x15) {
        return _ref4.apply(this, arguments);
      }

      return processTree;
    }()
  }, {
    key: 'processFile',
    value: function () {
      var _ref6 = _asyncToGenerator(function* (filePath) {
        if (!_path2.default.isAbsolute(filePath)) {
          throw new Error('compilation.processFile() expects path to be an absolute path');
        }

        var source = yield this.config.fileSystem.readFile(filePath);
        var file = {
          source: source,
          imports: [],
          filePath: filePath,
          contents: source,
          sourceMap: null
        };

        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = undefined;

        try {
          for (var _iterator5 = Helpers.filterComponents(this.components, 'transformer')[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var entry = _step5.value;

            var transformerResult = yield Helpers.invokeComponent(this, entry, 'callback', [], file);
            Helpers.mergeResult(file, transformerResult);
          }
        } catch (err) {
          _didIteratorError5 = true;
          _iteratorError5 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion5 && _iterator5.return) {
              _iterator5.return();
            }
          } finally {
            if (_didIteratorError5) {
              throw _iteratorError5;
            }
          }
        }

        var loaderResult = void 0;
        var _iteratorNormalCompletion6 = true;
        var _didIteratorError6 = false;
        var _iteratorError6 = undefined;

        try {
          for (var _iterator6 = Helpers.filterComponents(this.components, 'loader')[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
            var _entry2 = _step6.value;

            loaderResult = yield Helpers.invokeComponent(this, _entry2, 'callback', [], file);
            if (loaderResult) {
              Helpers.mergeResult(file, loaderResult);
              file.imports = file.imports.concat(loaderResult.imports);
              break;
            }
          }
        } catch (err) {
          _didIteratorError6 = true;
          _iteratorError6 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion6 && _iterator6.return) {
              _iterator6.return();
            }
          } finally {
            if (_didIteratorError6) {
              throw _iteratorError6;
            }
          }
        }

        if (!loaderResult) {
          throw new _pundleApi.MessageIssue('No loader configured in Pundle for \'' + filePath + '\'. Try adding pundle-loader-js (or another depending on filetype) with appropriate settings to your configuration', 'error');
        }

        var _iteratorNormalCompletion7 = true;
        var _didIteratorError7 = false;
        var _iteratorError7 = undefined;

        try {
          for (var _iterator7 = Helpers.filterComponents(this.components, 'plugin')[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
            var _entry3 = _step7.value;

            yield Helpers.invokeComponent(this, _entry3, 'callback', [], file);
          }
        } catch (err) {
          _didIteratorError7 = true;
          _iteratorError7 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion7 && _iterator7.return) {
              _iterator7.return();
            }
          } finally {
            if (_didIteratorError7) {
              throw _iteratorError7;
            }
          }
        }

        return file;
      });

      function processFile(_x19) {
        return _ref6.apply(this, arguments);
      }

      return processFile;
    }()
  }, {
    key: 'getImportRequest',
    value: function getImportRequest(request, from) {
      var id = ++uniqueID;
      return { id: id, request: request, resolved: null, from: from };
    }
  }, {
    key: 'addComponent',
    value: function addComponent(component, config) {
      var _this2 = this;

      if (!component || component.$apiVersion !== _pundleApi.version) {
        throw new Error('API version of component mismatches');
      }
      this.components.add({ component: component, config: config });
      Helpers.invokeComponent(this, { component: component, config: config }, 'activate', []);
      return new _sbEventKit.Disposable(function () {
        _this2.deleteComponent(component, config);
      });
    }
  }, {
    key: 'deleteComponent',
    value: function deleteComponent(component, config) {
      var _iteratorNormalCompletion8 = true;
      var _didIteratorError8 = false;
      var _iteratorError8 = undefined;

      try {
        for (var _iterator8 = this.components[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
          var entry = _step8.value;

          if (entry.config === config && entry.component === component) {
            this.components.delete(entry);
            Helpers.invokeComponent(this, entry, 'dispose', []);
            return true;
          }
        }
      } catch (err) {
        _didIteratorError8 = true;
        _iteratorError8 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion8 && _iterator8.return) {
            _iterator8.return();
          }
        } finally {
          if (_didIteratorError8) {
            throw _iteratorError8;
          }
        }
      }

      return false;
    }
  }, {
    key: 'watch',
    value: function () {
      var _ref7 = _asyncToGenerator(function* () {
        var _this3 = this;

        var givenConfig = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        var queue = Promise.resolve();
        var files = new Map();
        var config = Helpers.fillWatcherConfig(givenConfig);
        var resolvedEntries = yield Promise.all(this.config.entry.map(function (entry) {
          return _this3.resolve(entry);
        }));

        var watcher = new _watcher2.default(resolvedEntries, {
          usePolling: config.usePolling
        });

        var processFile = function () {
          var _ref8 = _asyncToGenerator(function* (filePath) {
            var overwrite = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

            if (files.has(filePath) && !overwrite) {
              return true;
            }
            var oldValue = files.get(filePath);
            if (oldValue === null) {
              return true;
            }

            var file = null;
            var processError = null;
            try {
              files.set(filePath, null);
              file = yield _this3.processFile(filePath);
              files.set(filePath, file);
              yield Promise.all(file.imports.map(function (entry) {
                return _this3.resolve(entry.request, filePath).then(function (resolved) {
                  entry.resolved = resolved;
                });
              }));
            } catch (error) {
              if (oldValue) {
                files.set(filePath, oldValue);
              } else {
                files.delete(filePath);
              }
              processError = error;
              _this3.report(error);
              return false;
            } finally {
              var _iteratorNormalCompletion9 = true;
              var _didIteratorError9 = false;
              var _iteratorError9 = undefined;

              try {
                for (var _iterator9 = Helpers.filterComponents(_this3.components, 'watcher')[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                  var entry = _step9.value;

                  try {
                    yield Helpers.invokeComponent(_this3, entry, 'tick', [], filePath, processError, file);
                  } catch (error) {
                    _this3.report(error);
                  }
                }
              } catch (err) {
                _didIteratorError9 = true;
                _iteratorError9 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion9 && _iterator9.return) {
                    _iterator9.return();
                  }
                } finally {
                  if (_didIteratorError9) {
                    throw _iteratorError9;
                  }
                }
              }
            }

            var oldImports = oldValue ? oldValue.imports : [];
            var newImports = file.imports;
            var addedImports = (0, _lodash2.default)(newImports, oldImports);
            var removedImports = (0, _lodash2.default)(oldImports, newImports);
            addedImports.forEach(function (entry) {
              watcher.watch(entry.resolved);
            });
            removedImports.forEach(function (entry) {
              watcher.unwatch(entry.resolved);
            });
            for (var i = 0, length = newImports.length; i < length; i++) {
              watcher.enable(newImports[i].resolved || '');
            }

            try {
              var _promises = yield Promise.all(file.imports.map(function (entry) {
                return processFile(entry.resolved, false);
              }));
              return _promises.every(function (i) {
                return i;
              });
            } catch (compilationError) {
              _this3.report(compilationError);
              return false;
            }
          });

          return function processFile(_x22, _x23) {
            return _ref8.apply(this, arguments);
          };
        }();

        var triggerCompile = function () {
          var _ref9 = _asyncToGenerator(function* () {
            yield queue;
            var _iteratorNormalCompletion10 = true;
            var _didIteratorError10 = false;
            var _iteratorError10 = undefined;

            try {
              for (var _iterator10 = Helpers.filterComponents(_this3.components, 'watcher')[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                var entry = _step10.value;

                try {
                  yield Helpers.invokeComponent(_this3, entry, 'compile', [], Array.from(files.values()));
                } catch (error) {
                  _this3.report(error);
                }
              }
            } catch (err) {
              _didIteratorError10 = true;
              _iteratorError10 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion10 && _iterator10.return) {
                  _iterator10.return();
                }
              } finally {
                if (_didIteratorError10) {
                  throw _iteratorError10;
                }
              }
            }
          });

          return function triggerCompile() {
            return _ref9.apply(this, arguments);
          };
        }();
        var triggerDebouncedCompile = (0, _sbDebounce2.default)(triggerCompile, 10);
        var triggerDebouncedImportsCheck = (0, _sbDebounce2.default)(_asyncToGenerator(function* () {
          yield queue;
          var changed = false;
          var _iteratorNormalCompletion11 = true;
          var _didIteratorError11 = false;
          var _iteratorError11 = undefined;

          try {
            for (var _iterator11 = files.values()[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
              var file = _step11.value;

              for (var i = 0, length = file.imports.length; i < length; i++) {
                var entry = file.imports[i];
                var oldResolved = entry.resolved;
                try {
                  yield _this3.config.fileSystem.stat(oldResolved);
                  continue;
                } catch (_) {}
                watcher.unwatch(oldResolved);
                try {
                  yield* function* () {
                    var resolved = yield _this3.resolve(entry.request, file.filePath);
                    entry.resolved = resolved;
                    watcher.enable(resolved);
                    watcher.watch(resolved);
                    queue = queue.then(function () {
                      return processFile(resolved, false);
                    });
                  }();
                } catch (_) {
                  watcher.watch(oldResolved);
                  _this3.report(_);
                  break;
                }

                if (!(yield queue)) {
                  break;
                }
                changed = true;
              }
            }
          } catch (err) {
            _didIteratorError11 = true;
            _iteratorError11 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion11 && _iterator11.return) {
                _iterator11.return();
              }
            } finally {
              if (_didIteratorError11) {
                throw _iteratorError11;
              }
            }
          }

          if (changed) {
            yield triggerCompile();
          }
        }), 10);

        var promises = resolvedEntries.map(function (entry) {
          return processFile(entry);
        });
        var successful = (yield Promise.all(promises)).every(function (i) {
          return i;
        });

        if (successful) {
          yield triggerCompile();
        }
        var _iteratorNormalCompletion12 = true;
        var _didIteratorError12 = false;
        var _iteratorError12 = undefined;

        try {
          for (var _iterator12 = Helpers.filterComponents(this.components, 'watcher')[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
            var entry = _step12.value;

            try {
              yield Helpers.invokeComponent(this, entry, 'ready', [], successful, Array.from(files.values()));
            } catch (error) {
              this.report(error);
            }
          }
        } catch (err) {
          _didIteratorError12 = true;
          _iteratorError12 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion12 && _iterator12.return) {
              _iterator12.return();
            }
          } finally {
            if (_didIteratorError12) {
              throw _iteratorError12;
            }
          }
        }

        watcher.on('change', function (filePath) {
          queue = queue.then(function () {
            return processFile(filePath, true).then(function (status) {
              return status && triggerDebouncedCompile();
            });
          });
        });
        watcher.on('unlink', function (filePath) {
          files.delete(filePath);
          watcher.disable(filePath);
          triggerDebouncedImportsCheck();
        });

        var disposable = new _sbEventKit.Disposable(function () {
          _this3.subscriptions.delete(disposable);
          watcher.dispose();
        });
        disposable.queue = queue;
        this.subscriptions.add(disposable);
        return disposable;
      });

      function watch(_x20) {
        return _ref7.apply(this, arguments);
      }

      return watch;
    }()
  }, {
    key: 'dispose',
    value: function dispose() {
      var _this4 = this;

      this.components.forEach(function (_ref11) {
        var component = _ref11.component;
        var config = _ref11.config;
        return _this4.deleteComponent(component, config);
      });
      this.subscriptions.dispose();
    }
  }]);

  return Compilation;
}();

exports.default = Compilation;